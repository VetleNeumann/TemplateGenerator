using System.Runtime.Intrinsics;
using System.Runtime.CompilerServices;
using EnCS;

namespace $namespace
{
	public partial class $ecsName
	{
		$worlds~>public class $worldName
		{
			$archTypes~>ArchTypeContainer<$archTypeName> container|$archTypeName|;<~~>\n			<~

			public $worldName()
			{
				$archTypes~>container|$archTypeName| = new ArchTypeContainer<$archTypeName>();<~~>\n				<~
			}

			$archTypes~>[MethodImpl(MethodImplOptions.AggressiveInlining)]
			public ArchRef<$archTypeName> Create(in |$archTypeName| data)
			{
				return container|$archTypeName|.Create(data);
			}
			
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			public |$archTypeName|.Ref Get(in ArchRef<$archTypeName> ptr)
			{
				return container|$archTypeName|.Get(ptr);
			}<~~>\n\n			<~

			$systems~>[MethodImpl(MethodImplOptions.AggressiveInlining)]
			public void Loop($systemName system)
			{
				$containers~>var enum|$archTypeName| = new ComponentEnumerableNew<$components~>$compName, |$compName|.Vectorized, |$compName|.Array<~~>, <~>.Enumerator<$archTypeName>(container|$archTypeName|.AsSpan());
				<~
				$containers~>system.Update(ref enum|$archTypeName|);<~~>\n				<~
			}<~~>\n\n			<~
		}<~~>\n\n		<~
	}
}