using System.Runtime.Intrinsics;
using System.Runtime.CompilerServices;
using EnCS;

namespace $namespace
{
	public partial class $ecsName
	{
		$archTypes~>public struct $archTypeName : $components~>IArchType<$archTypeName, $compName, |$compName|.Vectorized, |$compName|.Array><~~>, <~
		{
			$components~>public |$compName|.Vectorized $varName;<~~>\n			<~

			$components~>[MethodImpl(MethodImplOptions.AggressiveInlining)]
			static ref |$compName|.Array IArchType<$archTypeName, $compName, |$compName|.Vectorized, |$compName|.Array>.GetSingle(ref $archTypeName arch)
			{
				return ref Unsafe.As<|$compName|.Vectorized, |$compName|.Array>(ref arch.$varName);
			}

			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			static ref |$compName|.Vectorized IArchType<$archTypeName, $compName, |$compName|.Vectorized, |$compName|.Array>.GetVec(ref $archTypeName arch)
			{
				return ref arch.$varName;
			}<~~>\n\n			<~

			public ref struct Ref
			{
				$components~>public |$compName|.Ref $varName;<~~>\n				<~

				public Ref($components~>|$compName|.Ref $varName<~~>, <~)
				{
					$components~>this.$varName = $varName;<~~>\n					<~
				}

				[MethodImpl(MethodImplOptions.AggressiveInlining)]
				public static Ref FromArchType(ref $archTypeName archType, int idx)
				{
					return new Ref($components~>
						|$compName|.Ref.FromArray(ref Unsafe.As<|$compName|.Vectorized, |$compName|.Array>(ref archType.$varName), idx)<~~>, <~
					);
				}
			}
		}<~~>\n\n		<~
	}

	public static class |$ecsName|_ContainerExtensions
	{
		$archTypes~>[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static |$ecsName|.|$archTypeName|.Ref Get(this ref ArchTypeContainer<|$ecsName|.$archTypeName> container, ArchRef<|$ecsName|.$archTypeName> ptr)
		{
			return |$ecsName|.|$archTypeName|.Ref.FromArchType(ref container.GetVec(ptr), (int)ptr.idx & 7); // TODO: Fix anding
		}<~~>\n\n		<~
	}
}